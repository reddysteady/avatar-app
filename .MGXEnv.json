{
  "roles": {
    "Mike": {
      "rc": {
        "memory": {
          "storage": [
            {
              "id": "badebc2dc65247019bb9b0b6296eda73",
              "content": "# Project Summary\nThe AI-Driven Avatar App is a web application tailored for influencers aiming to elevate their digital presence through customizable avatars. It incorporates user authentication, social media integration (Instagram and YouTube), avatar customization, message management, and analytics tracking. This platform enhances engagement and streamlines content management, serving as an essential tool for influencers to manage their online interactions effectively.\n\n# Project Module Description\n- **User Authentication**: Manages user login and registration.\n- **Social Media Integration**: Links users' Instagram and YouTube accounts.\n- **Avatar Configuration**: Customizes avatar tone, style, and response settings.\n- **Message Management**: Enables users to view, filter, and respond to messages from linked platforms.\n- **Moderation Rules**: Automates message handling based on user-defined criteria.\n- **Analytics Dashboard**: Provides insights into message performance.\n- **Instagram Integration**: Facilitates authentication and messaging through a server-side proxy.\n- **Content Management**: Allows users to add and manage content sources from YouTube and Instagram.\n\n# Directory Tree\n```\nai_driven_avatar_class_diagram.mermaid        # Class diagram for the application\nai_driven_avatar_prd.md                       # Product Requirements Document\nai_driven_avatar_sequence_diagram.mermaid     # Sequence diagram for application flow\nai_driven_avatar_system_design.md              # System design documentation\nreact_template/                                # React application source code\n  \u251c\u2500\u2500 README.md                                # Overview of the React template\n  \u251c\u2500\u2500 eslint.config.js                         # Configuration for ESLint\n  \u251c\u2500\u2500 index.html                               # Main HTML file with updated CSP\n  \u251c\u2500\u2500 package.json                             # Project dependencies and scripts\n  \u251c\u2500\u2500 postcss.config.js                        # PostCSS configuration\n  \u251c\u2500\u2500 public/data/example.json                 # Example data for the application\n  \u251c\u2500\u2500 src/                                     # Source code directory\n  \u2502   \u251c\u2500\u2500 App.jsx                              # Main application component\n  \u2502   \u251c\u2500\u2500 components/                          # Reusable components\n  \u2502   \u251c\u2500\u2500 context/                             # Context API for state management\n  \u2502   \u251c\u2500\u2500 index.css                            # Global CSS styles\n  \u2502   \u251c\u2500\u2500 main.jsx                             # Entry point of the application\n  \u2502   \u251c\u2500\u2500 mockData/                            # Mock data for testing\n  \u2502   \u251c\u2500\u2500 services/                            # Service files for API integration\n  \u2502   \u2502   \u251c\u2500\u2500 analyticsService.jsx             # Service for analytics\n  \u2502   \u2502   \u251c\u2500\u2500 authService.js                   # Service for authentication\n  \u2502   \u2502   \u251c\u2500\u2500 instagramService.js              # Service for Instagram API integration\n  \u2502   \u2502   \u251c\u2500\u2500 contentService.js                # Service for content management\n  \u2502   \u2502   \u251c\u2500\u2500 openaiService.js                 # Service for OpenAI integration\n  \u2502   \u2502   \u251c\u2500\u2500 youtubeService.js                # Service for YouTube API integration\n  \u2502   \u2502   \u2514\u2500\u2500 messageService.js                # Service for message handling\n  \u251c\u2500\u2500 tailwind.config.js                       # Tailwind CSS configuration\n  \u2514\u2500\u2500 vite.config.js                           # Vite configuration for the build process\nuploads/                                       # Uploads directory for documents\n  \u251c\u2500\u2500 Avatar App Product Specification Document.docx # Product specification document\n  \u2514\u2500\u2500 Avatar App Product Specification Document (1).docx # Alternative version of the specification document\nserver/                                        # Server-side proxy for Instagram API\n  \u251c\u2500\u2500 server.js                                # Main server file\n  \u251c\u2500\u2500 .env                                     # Environment variables for server\n  \u2514\u2500\u2500 package.json                             # Server dependencies and scripts\n```\n\n# File Description Inventory\n- **ai_driven_avatar_class_diagram.mermaid**: Visual representation of class relationships.\n- **ai_driven_avatar_prd.md**: Document outlining product requirements.\n- **ai_driven_avatar_sequence_diagram.mermaid**: Flow of operations within the application.\n- **ai_driven_avatar_system_design.md**: Overview of system architecture.\n- **react_template/**: Contains the React application files.\n- **uploads/**: Contains product specification documents.\n- **server/**: Contains server-side proxy files for Instagram API integration.\n\n# Technology Stack\n- **Frontend**: React, Vite, Tailwind CSS\n- **State Management**: Context API\n- **Routing**: React Router\n- **Data Visualization**: Chart.js, react-chartjs-2\n- **Security**: Enhanced Content Security Policy (CSP)\n- **API Integration**: Axios for handling API requests, including Instagram Graph API and YouTube API\n- **Backend**: Node.js, Express for server-side proxy\n- **Database**: Supabase for managing content sources and chat history\n\n# Usage\n1. Install frontend dependencies:\n   ```bash\n   pnpm i react-router-dom chart.js react-chartjs-2 axios query-string @supabase/supabase-js openai\n   ```\n2. Lint the project:\n   ```bash\n   pnpm run lint\n   ```\n3. Build and run the frontend application:\n   ```bash\n   pnpm run dev\n   ```\n4. Set up the server:\n   - Create the server directory and files as specified.\n   - Install server dependencies:\n     ```bash\n     npm install\n     ```\n   - Run the server in development mode:\n     ```bash\n     npm run dev\n     ```\n\n\n\n\n# INSTRUCTION\n- You can search for the file path in the `/data/chats/e31qwd/workspace/`\n- After modifying the project files, if this project can be previewed, then you need to reinstall dependencies, restart service and preview;\n\n\n\n- Change the working directory to `/data/chats/e31qwd/workspace/react_template`.",
              "instruct_content": null,
              "role": "user",
              "cause_by": "metagpt.actions.add_requirement.UserRequirement",
              "sent_from": "",
              "send_to": [
                "<all>"
              ],
              "metadata": {}
            }
          ]
        }
      },
      "working_dir": "/data/chats/e31qwd/workspace/",
      "__module_class_name": "metagpt.roles.di.team_leader.TeamLeader",
      "name": "Mike"
    },
    "Emma": {
      "rc": {
        "memory": {
          "storage": [
            {
              "id": "badebc2dc65247019bb9b0b6296eda73",
              "content": "# Project Summary\nThe AI-Driven Avatar App is a web application tailored for influencers aiming to elevate their digital presence through customizable avatars. It incorporates user authentication, social media integration (Instagram and YouTube), avatar customization, message management, and analytics tracking. This platform enhances engagement and streamlines content management, serving as an essential tool for influencers to manage their online interactions effectively.\n\n# Project Module Description\n- **User Authentication**: Manages user login and registration.\n- **Social Media Integration**: Links users' Instagram and YouTube accounts.\n- **Avatar Configuration**: Customizes avatar tone, style, and response settings.\n- **Message Management**: Enables users to view, filter, and respond to messages from linked platforms.\n- **Moderation Rules**: Automates message handling based on user-defined criteria.\n- **Analytics Dashboard**: Provides insights into message performance.\n- **Instagram Integration**: Facilitates authentication and messaging through a server-side proxy.\n- **Content Management**: Allows users to add and manage content sources from YouTube and Instagram.\n\n# Directory Tree\n```\nai_driven_avatar_class_diagram.mermaid        # Class diagram for the application\nai_driven_avatar_prd.md                       # Product Requirements Document\nai_driven_avatar_sequence_diagram.mermaid     # Sequence diagram for application flow\nai_driven_avatar_system_design.md              # System design documentation\nreact_template/                                # React application source code\n  \u251c\u2500\u2500 README.md                                # Overview of the React template\n  \u251c\u2500\u2500 eslint.config.js                         # Configuration for ESLint\n  \u251c\u2500\u2500 index.html                               # Main HTML file with updated CSP\n  \u251c\u2500\u2500 package.json                             # Project dependencies and scripts\n  \u251c\u2500\u2500 postcss.config.js                        # PostCSS configuration\n  \u251c\u2500\u2500 public/data/example.json                 # Example data for the application\n  \u251c\u2500\u2500 src/                                     # Source code directory\n  \u2502   \u251c\u2500\u2500 App.jsx                              # Main application component\n  \u2502   \u251c\u2500\u2500 components/                          # Reusable components\n  \u2502   \u251c\u2500\u2500 context/                             # Context API for state management\n  \u2502   \u251c\u2500\u2500 index.css                            # Global CSS styles\n  \u2502   \u251c\u2500\u2500 main.jsx                             # Entry point of the application\n  \u2502   \u251c\u2500\u2500 mockData/                            # Mock data for testing\n  \u2502   \u251c\u2500\u2500 services/                            # Service files for API integration\n  \u2502   \u2502   \u251c\u2500\u2500 analyticsService.jsx             # Service for analytics\n  \u2502   \u2502   \u251c\u2500\u2500 authService.js                   # Service for authentication\n  \u2502   \u2502   \u251c\u2500\u2500 instagramService.js              # Service for Instagram API integration\n  \u2502   \u2502   \u251c\u2500\u2500 contentService.js                # Service for content management\n  \u2502   \u2502   \u251c\u2500\u2500 openaiService.js                 # Service for OpenAI integration\n  \u2502   \u2502   \u251c\u2500\u2500 youtubeService.js                # Service for YouTube API integration\n  \u2502   \u2502   \u2514\u2500\u2500 messageService.js                # Service for message handling\n  \u251c\u2500\u2500 tailwind.config.js                       # Tailwind CSS configuration\n  \u2514\u2500\u2500 vite.config.js                           # Vite configuration for the build process\nuploads/                                       # Uploads directory for documents\n  \u251c\u2500\u2500 Avatar App Product Specification Document.docx # Product specification document\n  \u2514\u2500\u2500 Avatar App Product Specification Document (1).docx # Alternative version of the specification document\nserver/                                        # Server-side proxy for Instagram API\n  \u251c\u2500\u2500 server.js                                # Main server file\n  \u251c\u2500\u2500 .env                                     # Environment variables for server\n  \u2514\u2500\u2500 package.json                             # Server dependencies and scripts\n```\n\n# File Description Inventory\n- **ai_driven_avatar_class_diagram.mermaid**: Visual representation of class relationships.\n- **ai_driven_avatar_prd.md**: Document outlining product requirements.\n- **ai_driven_avatar_sequence_diagram.mermaid**: Flow of operations within the application.\n- **ai_driven_avatar_system_design.md**: Overview of system architecture.\n- **react_template/**: Contains the React application files.\n- **uploads/**: Contains product specification documents.\n- **server/**: Contains server-side proxy files for Instagram API integration.\n\n# Technology Stack\n- **Frontend**: React, Vite, Tailwind CSS\n- **State Management**: Context API\n- **Routing**: React Router\n- **Data Visualization**: Chart.js, react-chartjs-2\n- **Security**: Enhanced Content Security Policy (CSP)\n- **API Integration**: Axios for handling API requests, including Instagram Graph API and YouTube API\n- **Backend**: Node.js, Express for server-side proxy\n- **Database**: Supabase for managing content sources and chat history\n\n# Usage\n1. Install frontend dependencies:\n   ```bash\n   pnpm i react-router-dom chart.js react-chartjs-2 axios query-string @supabase/supabase-js openai\n   ```\n2. Lint the project:\n   ```bash\n   pnpm run lint\n   ```\n3. Build and run the frontend application:\n   ```bash\n   pnpm run dev\n   ```\n4. Set up the server:\n   - Create the server directory and files as specified.\n   - Install server dependencies:\n     ```bash\n     npm install\n     ```\n   - Run the server in development mode:\n     ```bash\n     npm run dev\n     ```\n\n\n\n\n# INSTRUCTION\n- You can search for the file path in the `/data/chats/e31qwd/workspace/`\n- After modifying the project files, if this project can be previewed, then you need to reinstall dependencies, restart service and preview;\n\n\n\n- Change the working directory to `/data/chats/e31qwd/workspace/react_template`.",
              "instruct_content": null,
              "role": "user",
              "cause_by": "metagpt.actions.add_requirement.UserRequirement",
              "sent_from": "",
              "send_to": [
                "<all>"
              ],
              "metadata": {}
            }
          ]
        }
      },
      "working_dir": "/data/chats/e31qwd/workspace/",
      "__module_class_name": "metagpt.roles.product_manager.ProductManager",
      "name": "Emma"
    },
    "Bob": {
      "rc": {
        "memory": {
          "storage": [
            {
              "id": "badebc2dc65247019bb9b0b6296eda73",
              "content": "# Project Summary\nThe AI-Driven Avatar App is a web application tailored for influencers aiming to elevate their digital presence through customizable avatars. It incorporates user authentication, social media integration (Instagram and YouTube), avatar customization, message management, and analytics tracking. This platform enhances engagement and streamlines content management, serving as an essential tool for influencers to manage their online interactions effectively.\n\n# Project Module Description\n- **User Authentication**: Manages user login and registration.\n- **Social Media Integration**: Links users' Instagram and YouTube accounts.\n- **Avatar Configuration**: Customizes avatar tone, style, and response settings.\n- **Message Management**: Enables users to view, filter, and respond to messages from linked platforms.\n- **Moderation Rules**: Automates message handling based on user-defined criteria.\n- **Analytics Dashboard**: Provides insights into message performance.\n- **Instagram Integration**: Facilitates authentication and messaging through a server-side proxy.\n- **Content Management**: Allows users to add and manage content sources from YouTube and Instagram.\n\n# Directory Tree\n```\nai_driven_avatar_class_diagram.mermaid        # Class diagram for the application\nai_driven_avatar_prd.md                       # Product Requirements Document\nai_driven_avatar_sequence_diagram.mermaid     # Sequence diagram for application flow\nai_driven_avatar_system_design.md              # System design documentation\nreact_template/                                # React application source code\n  \u251c\u2500\u2500 README.md                                # Overview of the React template\n  \u251c\u2500\u2500 eslint.config.js                         # Configuration for ESLint\n  \u251c\u2500\u2500 index.html                               # Main HTML file with updated CSP\n  \u251c\u2500\u2500 package.json                             # Project dependencies and scripts\n  \u251c\u2500\u2500 postcss.config.js                        # PostCSS configuration\n  \u251c\u2500\u2500 public/data/example.json                 # Example data for the application\n  \u251c\u2500\u2500 src/                                     # Source code directory\n  \u2502   \u251c\u2500\u2500 App.jsx                              # Main application component\n  \u2502   \u251c\u2500\u2500 components/                          # Reusable components\n  \u2502   \u251c\u2500\u2500 context/                             # Context API for state management\n  \u2502   \u251c\u2500\u2500 index.css                            # Global CSS styles\n  \u2502   \u251c\u2500\u2500 main.jsx                             # Entry point of the application\n  \u2502   \u251c\u2500\u2500 mockData/                            # Mock data for testing\n  \u2502   \u251c\u2500\u2500 services/                            # Service files for API integration\n  \u2502   \u2502   \u251c\u2500\u2500 analyticsService.jsx             # Service for analytics\n  \u2502   \u2502   \u251c\u2500\u2500 authService.js                   # Service for authentication\n  \u2502   \u2502   \u251c\u2500\u2500 instagramService.js              # Service for Instagram API integration\n  \u2502   \u2502   \u251c\u2500\u2500 contentService.js                # Service for content management\n  \u2502   \u2502   \u251c\u2500\u2500 openaiService.js                 # Service for OpenAI integration\n  \u2502   \u2502   \u251c\u2500\u2500 youtubeService.js                # Service for YouTube API integration\n  \u2502   \u2502   \u2514\u2500\u2500 messageService.js                # Service for message handling\n  \u251c\u2500\u2500 tailwind.config.js                       # Tailwind CSS configuration\n  \u2514\u2500\u2500 vite.config.js                           # Vite configuration for the build process\nuploads/                                       # Uploads directory for documents\n  \u251c\u2500\u2500 Avatar App Product Specification Document.docx # Product specification document\n  \u2514\u2500\u2500 Avatar App Product Specification Document (1).docx # Alternative version of the specification document\nserver/                                        # Server-side proxy for Instagram API\n  \u251c\u2500\u2500 server.js                                # Main server file\n  \u251c\u2500\u2500 .env                                     # Environment variables for server\n  \u2514\u2500\u2500 package.json                             # Server dependencies and scripts\n```\n\n# File Description Inventory\n- **ai_driven_avatar_class_diagram.mermaid**: Visual representation of class relationships.\n- **ai_driven_avatar_prd.md**: Document outlining product requirements.\n- **ai_driven_avatar_sequence_diagram.mermaid**: Flow of operations within the application.\n- **ai_driven_avatar_system_design.md**: Overview of system architecture.\n- **react_template/**: Contains the React application files.\n- **uploads/**: Contains product specification documents.\n- **server/**: Contains server-side proxy files for Instagram API integration.\n\n# Technology Stack\n- **Frontend**: React, Vite, Tailwind CSS\n- **State Management**: Context API\n- **Routing**: React Router\n- **Data Visualization**: Chart.js, react-chartjs-2\n- **Security**: Enhanced Content Security Policy (CSP)\n- **API Integration**: Axios for handling API requests, including Instagram Graph API and YouTube API\n- **Backend**: Node.js, Express for server-side proxy\n- **Database**: Supabase for managing content sources and chat history\n\n# Usage\n1. Install frontend dependencies:\n   ```bash\n   pnpm i react-router-dom chart.js react-chartjs-2 axios query-string @supabase/supabase-js openai\n   ```\n2. Lint the project:\n   ```bash\n   pnpm run lint\n   ```\n3. Build and run the frontend application:\n   ```bash\n   pnpm run dev\n   ```\n4. Set up the server:\n   - Create the server directory and files as specified.\n   - Install server dependencies:\n     ```bash\n     npm install\n     ```\n   - Run the server in development mode:\n     ```bash\n     npm run dev\n     ```\n\n\n\n\n# INSTRUCTION\n- You can search for the file path in the `/data/chats/e31qwd/workspace/`\n- After modifying the project files, if this project can be previewed, then you need to reinstall dependencies, restart service and preview;\n\n\n\n- Change the working directory to `/data/chats/e31qwd/workspace/react_template`.",
              "instruct_content": null,
              "role": "user",
              "cause_by": "metagpt.actions.add_requirement.UserRequirement",
              "sent_from": "",
              "send_to": [
                "<all>"
              ],
              "metadata": {}
            }
          ]
        }
      },
      "working_dir": "/data/chats/e31qwd/workspace/",
      "__module_class_name": "metagpt.roles.architect.Architect",
      "name": "Bob"
    },
    "Alex": {
      "rc": {
        "memory": {
          "storage": [
            {
              "id": "badebc2dc65247019bb9b0b6296eda73",
              "content": "# Project Summary\nThe AI-Driven Avatar App is a web application tailored for influencers aiming to elevate their digital presence through customizable avatars. It incorporates user authentication, social media integration (Instagram and YouTube), avatar customization, message management, and analytics tracking. This platform enhances engagement and streamlines content management, serving as an essential tool for influencers to manage their online interactions effectively.\n\n# Project Module Description\n- **User Authentication**: Manages user login and registration.\n- **Social Media Integration**: Links users' Instagram and YouTube accounts.\n- **Avatar Configuration**: Customizes avatar tone, style, and response settings.\n- **Message Management**: Enables users to view, filter, and respond to messages from linked platforms.\n- **Moderation Rules**: Automates message handling based on user-defined criteria.\n- **Analytics Dashboard**: Provides insights into message performance.\n- **Instagram Integration**: Facilitates authentication and messaging through a server-side proxy.\n- **Content Management**: Allows users to add and manage content sources from YouTube and Instagram.\n\n# Directory Tree\n```\nai_driven_avatar_class_diagram.mermaid        # Class diagram for the application\nai_driven_avatar_prd.md                       # Product Requirements Document\nai_driven_avatar_sequence_diagram.mermaid     # Sequence diagram for application flow\nai_driven_avatar_system_design.md              # System design documentation\nreact_template/                                # React application source code\n  \u251c\u2500\u2500 README.md                                # Overview of the React template\n  \u251c\u2500\u2500 eslint.config.js                         # Configuration for ESLint\n  \u251c\u2500\u2500 index.html                               # Main HTML file with updated CSP\n  \u251c\u2500\u2500 package.json                             # Project dependencies and scripts\n  \u251c\u2500\u2500 postcss.config.js                        # PostCSS configuration\n  \u251c\u2500\u2500 public/data/example.json                 # Example data for the application\n  \u251c\u2500\u2500 src/                                     # Source code directory\n  \u2502   \u251c\u2500\u2500 App.jsx                              # Main application component\n  \u2502   \u251c\u2500\u2500 components/                          # Reusable components\n  \u2502   \u251c\u2500\u2500 context/                             # Context API for state management\n  \u2502   \u251c\u2500\u2500 index.css                            # Global CSS styles\n  \u2502   \u251c\u2500\u2500 main.jsx                             # Entry point of the application\n  \u2502   \u251c\u2500\u2500 mockData/                            # Mock data for testing\n  \u2502   \u251c\u2500\u2500 services/                            # Service files for API integration\n  \u2502   \u2502   \u251c\u2500\u2500 analyticsService.jsx             # Service for analytics\n  \u2502   \u2502   \u251c\u2500\u2500 authService.js                   # Service for authentication\n  \u2502   \u2502   \u251c\u2500\u2500 instagramService.js              # Service for Instagram API integration\n  \u2502   \u2502   \u251c\u2500\u2500 contentService.js                # Service for content management\n  \u2502   \u2502   \u251c\u2500\u2500 openaiService.js                 # Service for OpenAI integration\n  \u2502   \u2502   \u251c\u2500\u2500 youtubeService.js                # Service for YouTube API integration\n  \u2502   \u2502   \u2514\u2500\u2500 messageService.js                # Service for message handling\n  \u251c\u2500\u2500 tailwind.config.js                       # Tailwind CSS configuration\n  \u2514\u2500\u2500 vite.config.js                           # Vite configuration for the build process\nuploads/                                       # Uploads directory for documents\n  \u251c\u2500\u2500 Avatar App Product Specification Document.docx # Product specification document\n  \u2514\u2500\u2500 Avatar App Product Specification Document (1).docx # Alternative version of the specification document\nserver/                                        # Server-side proxy for Instagram API\n  \u251c\u2500\u2500 server.js                                # Main server file\n  \u251c\u2500\u2500 .env                                     # Environment variables for server\n  \u2514\u2500\u2500 package.json                             # Server dependencies and scripts\n```\n\n# File Description Inventory\n- **ai_driven_avatar_class_diagram.mermaid**: Visual representation of class relationships.\n- **ai_driven_avatar_prd.md**: Document outlining product requirements.\n- **ai_driven_avatar_sequence_diagram.mermaid**: Flow of operations within the application.\n- **ai_driven_avatar_system_design.md**: Overview of system architecture.\n- **react_template/**: Contains the React application files.\n- **uploads/**: Contains product specification documents.\n- **server/**: Contains server-side proxy files for Instagram API integration.\n\n# Technology Stack\n- **Frontend**: React, Vite, Tailwind CSS\n- **State Management**: Context API\n- **Routing**: React Router\n- **Data Visualization**: Chart.js, react-chartjs-2\n- **Security**: Enhanced Content Security Policy (CSP)\n- **API Integration**: Axios for handling API requests, including Instagram Graph API and YouTube API\n- **Backend**: Node.js, Express for server-side proxy\n- **Database**: Supabase for managing content sources and chat history\n\n# Usage\n1. Install frontend dependencies:\n   ```bash\n   pnpm i react-router-dom chart.js react-chartjs-2 axios query-string @supabase/supabase-js openai\n   ```\n2. Lint the project:\n   ```bash\n   pnpm run lint\n   ```\n3. Build and run the frontend application:\n   ```bash\n   pnpm run dev\n   ```\n4. Set up the server:\n   - Create the server directory and files as specified.\n   - Install server dependencies:\n     ```bash\n     npm install\n     ```\n   - Run the server in development mode:\n     ```bash\n     npm run dev\n     ```\n\n\n\n\n# INSTRUCTION\n- You can search for the file path in the `/data/chats/e31qwd/workspace/`\n- After modifying the project files, if this project can be previewed, then you need to reinstall dependencies, restart service and preview;\n\n\n\n- Change the working directory to `/data/chats/e31qwd/workspace/react_template`.",
              "instruct_content": null,
              "role": "user",
              "cause_by": "metagpt.actions.add_requirement.UserRequirement",
              "sent_from": "",
              "send_to": [
                "<all>"
              ],
              "metadata": {}
            }
          ]
        }
      },
      "is_first_dev_request": false,
      "working_dir": "/data/chats/e31qwd/workspace/react_template",
      "__module_class_name": "metagpt.roles.di.frontend_engineer.FrontendEngineer",
      "name": "Alex"
    },
    "David": {
      "rc": {
        "memory": {
          "storage": [
            {
              "id": "badebc2dc65247019bb9b0b6296eda73",
              "content": "# Project Summary\nThe AI-Driven Avatar App is a web application tailored for influencers aiming to elevate their digital presence through customizable avatars. It incorporates user authentication, social media integration (Instagram and YouTube), avatar customization, message management, and analytics tracking. This platform enhances engagement and streamlines content management, serving as an essential tool for influencers to manage their online interactions effectively.\n\n# Project Module Description\n- **User Authentication**: Manages user login and registration.\n- **Social Media Integration**: Links users' Instagram and YouTube accounts.\n- **Avatar Configuration**: Customizes avatar tone, style, and response settings.\n- **Message Management**: Enables users to view, filter, and respond to messages from linked platforms.\n- **Moderation Rules**: Automates message handling based on user-defined criteria.\n- **Analytics Dashboard**: Provides insights into message performance.\n- **Instagram Integration**: Facilitates authentication and messaging through a server-side proxy.\n- **Content Management**: Allows users to add and manage content sources from YouTube and Instagram.\n\n# Directory Tree\n```\nai_driven_avatar_class_diagram.mermaid        # Class diagram for the application\nai_driven_avatar_prd.md                       # Product Requirements Document\nai_driven_avatar_sequence_diagram.mermaid     # Sequence diagram for application flow\nai_driven_avatar_system_design.md              # System design documentation\nreact_template/                                # React application source code\n  \u251c\u2500\u2500 README.md                                # Overview of the React template\n  \u251c\u2500\u2500 eslint.config.js                         # Configuration for ESLint\n  \u251c\u2500\u2500 index.html                               # Main HTML file with updated CSP\n  \u251c\u2500\u2500 package.json                             # Project dependencies and scripts\n  \u251c\u2500\u2500 postcss.config.js                        # PostCSS configuration\n  \u251c\u2500\u2500 public/data/example.json                 # Example data for the application\n  \u251c\u2500\u2500 src/                                     # Source code directory\n  \u2502   \u251c\u2500\u2500 App.jsx                              # Main application component\n  \u2502   \u251c\u2500\u2500 components/                          # Reusable components\n  \u2502   \u251c\u2500\u2500 context/                             # Context API for state management\n  \u2502   \u251c\u2500\u2500 index.css                            # Global CSS styles\n  \u2502   \u251c\u2500\u2500 main.jsx                             # Entry point of the application\n  \u2502   \u251c\u2500\u2500 mockData/                            # Mock data for testing\n  \u2502   \u251c\u2500\u2500 services/                            # Service files for API integration\n  \u2502   \u2502   \u251c\u2500\u2500 analyticsService.jsx             # Service for analytics\n  \u2502   \u2502   \u251c\u2500\u2500 authService.js                   # Service for authentication\n  \u2502   \u2502   \u251c\u2500\u2500 instagramService.js              # Service for Instagram API integration\n  \u2502   \u2502   \u251c\u2500\u2500 contentService.js                # Service for content management\n  \u2502   \u2502   \u251c\u2500\u2500 openaiService.js                 # Service for OpenAI integration\n  \u2502   \u2502   \u251c\u2500\u2500 youtubeService.js                # Service for YouTube API integration\n  \u2502   \u2502   \u2514\u2500\u2500 messageService.js                # Service for message handling\n  \u251c\u2500\u2500 tailwind.config.js                       # Tailwind CSS configuration\n  \u2514\u2500\u2500 vite.config.js                           # Vite configuration for the build process\nuploads/                                       # Uploads directory for documents\n  \u251c\u2500\u2500 Avatar App Product Specification Document.docx # Product specification document\n  \u2514\u2500\u2500 Avatar App Product Specification Document (1).docx # Alternative version of the specification document\nserver/                                        # Server-side proxy for Instagram API\n  \u251c\u2500\u2500 server.js                                # Main server file\n  \u251c\u2500\u2500 .env                                     # Environment variables for server\n  \u2514\u2500\u2500 package.json                             # Server dependencies and scripts\n```\n\n# File Description Inventory\n- **ai_driven_avatar_class_diagram.mermaid**: Visual representation of class relationships.\n- **ai_driven_avatar_prd.md**: Document outlining product requirements.\n- **ai_driven_avatar_sequence_diagram.mermaid**: Flow of operations within the application.\n- **ai_driven_avatar_system_design.md**: Overview of system architecture.\n- **react_template/**: Contains the React application files.\n- **uploads/**: Contains product specification documents.\n- **server/**: Contains server-side proxy files for Instagram API integration.\n\n# Technology Stack\n- **Frontend**: React, Vite, Tailwind CSS\n- **State Management**: Context API\n- **Routing**: React Router\n- **Data Visualization**: Chart.js, react-chartjs-2\n- **Security**: Enhanced Content Security Policy (CSP)\n- **API Integration**: Axios for handling API requests, including Instagram Graph API and YouTube API\n- **Backend**: Node.js, Express for server-side proxy\n- **Database**: Supabase for managing content sources and chat history\n\n# Usage\n1. Install frontend dependencies:\n   ```bash\n   pnpm i react-router-dom chart.js react-chartjs-2 axios query-string @supabase/supabase-js openai\n   ```\n2. Lint the project:\n   ```bash\n   pnpm run lint\n   ```\n3. Build and run the frontend application:\n   ```bash\n   pnpm run dev\n   ```\n4. Set up the server:\n   - Create the server directory and files as specified.\n   - Install server dependencies:\n     ```bash\n     npm install\n     ```\n   - Run the server in development mode:\n     ```bash\n     npm run dev\n     ```\n\n\n\n\n# INSTRUCTION\n- You can search for the file path in the `/data/chats/e31qwd/workspace/`\n- After modifying the project files, if this project can be previewed, then you need to reinstall dependencies, restart service and preview;\n\n\n\n- Change the working directory to `/data/chats/e31qwd/workspace/react_template`.",
              "instruct_content": null,
              "role": "user",
              "cause_by": "metagpt.actions.add_requirement.UserRequirement",
              "sent_from": "",
              "send_to": [
                "<all>"
              ],
              "metadata": {}
            }
          ]
        }
      },
      "working_dir": "/data/chats/e31qwd/workspace/",
      "__module_class_name": "metagpt.roles.di.data_analyst.DataAnalyst",
      "name": "David"
    }
  }
}